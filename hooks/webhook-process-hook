#!/usr/bin/python

import sys
import ConfigParser
import getopt
import os.path
import requests
import json
import logging

log_file = os.path.expanduser('python.log')
logging.basicConfig(filename=log_file,level=logging.INFO)

# Config file path
config_path = '/home/gerrit2/review_site/hooks/gerrit-webhook'

config = ConfigParser.RawConfigParser()
config.read(config_path)

url = config.get('webhook', 'url')
logging.info('URL: {}'.format(url))

def show_usage():
    print '\nNormal webhook usage: ' + sys.argv[0] + ' --action [comment|new|merged|abandoned] --change <change id> --commit <git hash> --change-url <url to change>'


def fire_webhook(action, id, commit, commitUrl, who, branch, project, comment, verified, code_review):
    payload = {
        'action': action,
        'id': id,
        'commit': commit,
        'url': commitUrl,
        'user': who,
        'branch': branch,
        'project': project
    }
    if action == "comment":
        payload["comment"] = comment
    payload["verified"] = verified
    payload["code_review"] = code_review
    headers = {'content-type': 'application/json'}
    requests.post("{}/patchsets".format(url), data=json.dumps(payload), headers=headers)


def main():
    if (len(sys.argv) < 2):
        show_usage()
        exit()
    logging.info('args: {}'.format(sys.argv))
    need = ['action=', 'change=', 'change-url=', 'commit=', 'project=', 'branch=', 'uploader=',
            'patchset=', 'abandoner=', 'reason=', 'submitter=', 'is-draft=', 'change-owner=', 'author=', 'comment=', 'newrev=', 'kind=', 'Code-Review=', 'author=', 'Verified=', 'Code-Review=']
    logging.info('After need')
    optlist, args = getopt.getopt(sys.argv[1:], '', need)
    logging.info('optlist: {}'.format(optlist))
    id = action = commitUrl = who = commit = branch = project = comment = verified = code_review = ''

    for o, a in optlist:
        if o == '--change': id = a
        elif o == '--change-url': commitUrl = a
        elif o == '--commit': commit = a
        elif o == '--action': action = a
        elif o == '--uploader': who = a
        elif o == '--submitter': who = a
        elif o == '--author': who = a
        elif o == '--abandoner': who = a
        elif o == '--branch': branch = a
        elif o == '--project': project = a
        elif o == '--comment': comment = a
        elif o == '--Verified': verified = a
        elif o == '--Code-Review': code_review = a
    logging.info('further after for')
    if (len(commit) > 0 and len(id) > 0):
        logging.info('before fire webhook')
        fire_webhook(action, id, commit, commitUrl, who, branch, project, comment, verified, code_review)
        logging.info('after fire webhook')
    else:
        logging.info('show usage')
        show_usage()

if __name__ == '__main__':
    main()
